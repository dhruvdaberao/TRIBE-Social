# Tribe Full-Stack Application - Developer Guide

Hello! Congratulations on the major upgrade to your Tribe application. This guide contains everything you need to get the new, feature-rich, full-stack version of the app up and running, and to continue its development.

This app is now a complete MERN-stack (MongoDB, Express, React, Node.js) application with a real-time layer using Socket.IO.

---
### **What You Need to Do (Setup)**
---

To get the application working on your computer, you only need to complete a few steps in the backend.

**Step 1: Install Dependencies**
You need to install dependencies for the backend. Open a terminal and navigate to the `/backend` directory.

```bash
# Navigate to the backend directory
cd backend

# Install all backend dependencies
npm install
```

**Step 2: Configure Your Secret Keys**
This is the most important step. You need to provide your database connection string and your Google AI API key.

1.  In the `/backend` directory, create a new file named `.env`.
2.  Copy the following content into your new `.env` file and fill in your details:

```env
# Server Configuration
PORT=5001

# MongoDB Database Connection String (get this from MongoDB Atlas)
MONGO_URI=your_mongodb_connection_string_goes_here

# JSON Web Token (JWT) Secret for Authentication
JWT_SECRET=replace_this_with_a_very_long_and_secure_random_string

# Google Gemini API Key (for the Chuk AI feature)
API_KEY=your_google_gemini_api_key_goes_here
```

*   **`MONGO_URI`**: The connection string for your database. Instructions on how to get this for free are in the next section.
*   **`JWT_SECRET`**: A secret key for signing auth tokens. Make this a long, random, and unguessable string for security.
*   **`API_KEY`**: Your API key from Google AI Studio to power the Chuk AI chat feature.

**Step 3: Start the Backend Server**
Once your `.env` file is saved, start the server from the `/backend` directory:

```bash
npm run server
```

If successful, you'll see messages like `Server running on port 5001` and `MongoDB Connected`. Your API is now live.

**Step 4: Run the Frontend**
The frontend requires no special setup. Simply open the `index.html` file in your browser, ideally using a tool like the "Live Server" extension in VS Code.

That's it! Your full-stack application is now running locally.

---
### **How to Get a FREE Cloud Database (MongoDB Atlas)**
---

1.  **Sign Up:** Go to `https://www.mongodb.com/cloud/atlas` and create a free account.
2.  **Create a Free Cluster:** Follow the instructions to create a new "M0 Sandbox" cluster.
3.  **Create a Database User:**
    *   Go to "Database Access" -> "Add New Database User".
    *   Create a username and a secure password. **Save this password!**
4.  **Whitelist Your IP Address:**
    *   Go to "Network Access" -> "Add IP Address".
    *   Click "Allow Access from Anywhere" (`0.0.0.0/0`). This is fine for development.
5.  **Get Your Connection String:**
    *   Go back to "Database", click "Connect" on your cluster, and choose "Connect your application".
    *   Copy the connection string.
6.  **Update Your `.env` File:**
    *   Paste the string into your `/backend/.env` file for the `MONGO_URI` variable.
    *   **Crucially, replace `<password>` in the string with the actual database user password you created.**

**Restart your backend server (`npm run server`) after updating the `.env` file.**

---
### **Project Summary & Architecture**
---

*   **Frontend (Root Directory):** A dynamic, single-page application built with React and TailwindCSS. It communicates with the backend via a REST API and a real-time WebSocket connection.
*   **Backend (`/backend`):** A robust API built with Node.js and Express. It handles all business logic, database interactions, user authentication, and real-time events.
*   **Database:** A NoSQL database powered by MongoDB, with schemas managed by Mongoose.
*   **Real-Time Layer:** Socket.IO enables instantaneous, bi-directional communication for live chats, typing indicators, notifications, and feed updates. All data modifications (new posts, likes, etc.) are broadcast from the server to all connected clients, ensuring everyone's UI is always in sync.

---
### **Deployment to Production**
---

Deploying this app involves two parts:

1.  **Backend Deployment (e.g., on Render):**
    *   Push your code to GitHub.
    *   Create a "Web Service" on Render and connect it to your repository.
    *   **Set the Root Directory to `backend`**.
    *   Set the build command to `npm install` and the start command to `npm start`.
    *   Add your environment variables (`MONGO_URI`, `JWT_SECRET`, `API_KEY`) in the Render dashboard.
    *   Your API will be live at a URL like `https://your-app-name.onrender.com`.

2.  **Frontend Deployment (e.g., on Vercel):**
    *   Open `api/config.ts` in your code.
    *   **Replace the URL with your live backend URL from Render.**
    *   Push this change to GitHub.
    *   Connect your Git repository to Vercel. It will automatically detect the static frontend.
    *   Deploy. Your application is now live!
